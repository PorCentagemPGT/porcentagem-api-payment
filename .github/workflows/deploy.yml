name: CI/CD Deploy to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Variáveis de ambiente globais:
      ACR_NAME: PorCentagem                     # Nome do Azure Container Registry (sem sufixo .azurecr.io)
      ACR_LOGIN_SERVER: porcentagem.azurecr.io  # URL do login no ACR
      AZURE_RESOURCE_GROUP: Porcentagem       # Nome do Resource Group no Azure onde está o Web App
      APP_NAME: porcentagem-api-payment            # Nome do Web App no Azure (e do container/imagem)

    steps:
      # 1. Checkout do código do repositório
      - name: Checar código do repositório
        uses: actions/checkout@v3
        # (Garante que o código da branch atual esteja disponível para build/testes)

      # 2. Configurar Node.js (necessário para rodar o linter)
      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Usa Node.js v18 (LTS)

      # 3. Instalar dependências do projeto
      - name: Instalar dependências
        run: npm i
        # Usa npm i para instalar a partir do package-lock.json, garantindo builds reproduzíveis e rápidos

      # 4. Executar linter (npm run lint)
      - name: Análise estática de código (Lint)
        run: npm run lint
        # Se o linter encontrar erros, o workflow falhará e interromperá aqui, evitando deploy de código mal formatado

      # 5. Autenticar no Azure usando Service Principal
      - name: Login no Azure (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Faz login na Azure CLI com as credenciais da Service Principal.

      # 6. Login no Azure Container Registry (ACR)
      - name: Login no Azure Container Registry
        run: az acr login --name $ACR_NAME
        # Autentica o Docker no ACR usando a sessão Azure (a SP deve ter permissão AcrPush no registro).

      # 7. Build da imagem Docker do microserviço
      - name: Build da imagem Docker
        run: docker build . -t $ACR_LOGIN_SERVER/$APP_NAME:latest
        # Constrói a imagem Docker a partir do Dockerfile na raiz do repositório.
        # Marca a imagem com o nome do registro ACR, nome do app e tag "latest".

      # 8. Push da imagem para o ACR
      - name: Push da imagem para ACR
        run: docker push $ACR_LOGIN_SERVER/$APP_NAME:latest
        # Envia a imagem recém-construída para o Azure Container Registry com a tag "latest".

      # 9. Configurar variáveis de ambiente no Web App (App Settings)
      - name: Configurar App Settings do Azure Web App
        run: |
          az webapp config appsettings set --resource-group $AZURE_RESOURCE_GROUP --name $APP_NAME --settings \
            'DATABASE_URL=${{ secrets.DATABASE_URL }}'
        # Define as configurações de ambiente do aplicativo no Azure (equivalentes a variáveis de ambiente no contêiner).
      
      # 10. Deploy da imagem Docker no Web App do Azure
      - name: Deploy para Azure Web App (Container)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}
          images: ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:latest
        # Aciona o deploy da imagem especificada para o App Service identificado por app-name.
        # A action azure/webapps-deploy@v2 usa a imagem no ACR (já enviada) e atualiza o Web App para usar esta nova imagem.
        # O Web App corresponde ao nome do microserviço (APP_NAME).
        # Esta etapa garante que a versão "latest" recém enviada seja puxada e implantada (o Azure fará o pull da imagem do ACR e iniciará o container).

      # 11. Logout da sessão Azure (limpeza)
      - name: Logout do Azure
        run: az logout
        # Encerra a sessão/login da Azure CLI por segurança. Boa prática para garantir que credenciais não permaneçam ativas após o uso.
